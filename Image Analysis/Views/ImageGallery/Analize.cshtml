@using System.Drawing
@using System.Drawing.Imaging
@using System.Text
@using Microsoft.AspNet.Identity
@using System.Net;
@using Image_Analysis.Models;
@model Image_Analysis.ViewModels.AnalizeViewModel

@{
    ViewBag.Title = "Analize";
}
<head>
    @*<script src="@Url.Content("~/Scripts/Images.js")"></script>*@
    
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js"></script>
<script src="/Scripts/jquery-1.10.2.js"></script>
    <script>
    function processResult(response) {
    var dataI = JSON.stringify(response);
    //$('#response').text(dataI);
    var dataII = JSON.parse(dataI);

    var disgust = pullDisgust(dataII);
    var roundedDisgust = roundDisgust(disgust);
    var finalDisgust = addDigust(roundedDisgust);

    var anger = pullAnger(dataII);
    var roundedAnger = roundAnger(anger);
    var finalAnger = addAnger(roundedAnger);

    var happiness = pullHappiness(dataII);
    var roundedHappiness = roundHappiness(happiness);
    var finalHappiness = addHappiness(roundedHappiness);

    var fear = pullFear(dataII);
    var roundedFear = roundFear(fear);
    var finalFear = addFear(roundedFear);

    var neutral = pullNeutral(dataII);
    var roundedNeutral = roundNeutral(neutral);
    var finalNeutral = addNeutral(roundedNeutral);

    var sadness = pullSadness(dataII);
    var roundedSadness = roundSadness(sadness);
    var finalSadness = addSadness(roundedSadness);

    var surprise = pullSurprise(dataII);
    var roundedSurprise = roundSurprise(surprise);
    var finalSurprise = addSurprise(roundedSurprise);

    Checker(finalDisgust, finalAnger, finalHappiness, finalFear, finalNeutral, finalSadness, finalSurprise);
    }
    //Disgust
    function pullDisgust(dataII) {
    var list = [];
    for (var i = 0; i < dataII.length; i++) {
    var disgust = dataII[i].scores.disgust;
    list.push(disgust);
    }
    return list;
    }
    function roundDisgust(disgust) {
    var list = [];
    for (var i = 0; i < disgust.length; i++) {
        var rw = disgust[i];
        var x = rw.toString().length;
        if (x >= 8) {
            var r = rw.toString().slice(0, -5);
            list.push(r);
        } else {
            list.push(rw);
        }      
    }
    return list;
    }
    function addDigust(roundedDisgust) {
    var total = 0;
    for (var i = 0; i < roundedDisgust.length; i++) {
    total += parseFloat(roundedDisgust[i]);
    }
    var final = total / roundedDisgust.length;
    return final;
    }
    //Anger
    function pullAnger(dataII) {
    var list = [];
    for (var i = 0; i < dataII.length; i++) {
    var anger = dataII[i].scores.anger;
    list.push(anger);
    }
    return list;
    }
    function roundAnger(anger) {
    var list = [];
    for (var i = 0; i < anger.length; i++) {
    var rw = anger[i];
    var x = rw.toString().length;
    if (x >= 8) {
        var r = rw.toString().slice(0, -5);
        list.push(r);
    } else {
        list.push(rw);
    }
    }
    return list;
    }
    function addAnger(roundedAnger) {
    var total = 0;
    for (var i = 0; i < roundedAnger.length; i++) {
    total += parseFloat(roundedAnger[i]);
    }
    var final = total / roundedAnger.length;
    return final;
    }
    //Happiness
    function pullHappiness(dataII) {
    var list = [];
    for (var i = 0; i < dataII.length; i++) {
    var happiness = dataII[i].scores.happiness;
    list.push(happiness);
    }
    return list;
    }
    function roundHappiness(happiness) {
    var list = [];
    for (var i = 0; i < happiness.length; i++) {
    var rw = happiness[i];
    var x = rw.toString().length;
    if (x >= 8) {
        var r = rw.toString().slice(0, -5);
        list.push(r);
    } else {
        list.push(rw);
    }
    }
    return list;
    }
    function addHappiness(roundedHappiness) {
    var total = 0;
    for (var i = 0; i < roundedHappiness.length; i++) {
    total += parseFloat(roundedHappiness[i]);
    }
    var final = total / roundedHappiness.length;
    return final;
    }
    //Fear
    function pullFear(dataII) {
    var list = [];
    for (var i = 0; i < dataII.length; i++) {
    var fear = dataII[i].scores.fear;
    list.push(fear);
    }
    return list;
    }
    function roundFear(fear) {
    var list = [];
    for (var i = 0; i < fear.length; i++) {
    var rw = fear[i];
    var x = rw.toString().length;
    if (x >= 8) {
        var r = rw.toString().slice(0, -5);
        list.push(r);
    } else {
        list.push(rw);
    }
    }
    return list;
    }

    function addFear(roundedFear) {
    var total = 0;
    for (var i = 0; i < roundedFear.length; i++) {
    total += parseFloat(roundedFear[i]);
    }
    var final = total / roundedFear.length;
    return final;
    }
    //Neutral
    function pullNeutral(dataII) {
    var list = [];
    for (var i = 0; i < dataII.length; i++) {
    var neutral = dataII[i].scores.neutral;
    list.push(neutral);
    }
    return list;
    }
    function roundNeutral(neutral) {
    var list = [];
    for (var i = 0; i < neutral.length; i++) {
    var rw = neutral[i];
    var x = rw.toString().length;
    if (x >= 8) {
        var r = rw.toString().slice(0, -5);
        list.push(r);
    } else {
        list.push(rw);
    }
    }
    return list;
    }
    function addNeutral(roundedNeutral) {
    var total = 0;
    for (var i = 0; i < roundedNeutral.length; i++) {
    total += parseFloat(roundedNeutral[i]);
    }
    var final = total / roundedNeutral.length;
    return final;
    }
    //Sadness
    function pullSadness(dataII) {
    var list = [];
    for (var i = 0; i < dataII.length; i++) {
    var sadness = dataII[i].scores.sadness;
    list.push(sadness);
    }
    return list;
    }
    function roundSadness(sadness) {
    var list = [];
    for (var i = 0; i < sadness.length; i++) {
    var rw = sadness[i];
    var x = rw.toString().length;
    if (x >= 8) {
        var r = rw.toString().slice(0, -5);
        list.push(r);
    } else {
        list.push(rw);
    }
    }
    return list;
    }
    function addSadness(roundedSadness) {
    var total = 0;
    for (var i = 0; i < roundedSadness.length; i++) {
    total += parseFloat(roundedSadness[i]);
    }
    var final = total / roundedSadness.length;
    return final;
    }
    //Surprise
    function pullSurprise(dataII) {
    var list = [];
    for (var i = 0; i < dataII.length; i++) {
    var surprise = dataII[i].scores.surprise;
    list.push(surprise);
    }
    return list;
    }
    function roundSurprise(surprise) {
    var list = [];
    for (var i = 0; i < surprise.length; i++) {
    var rw = surprise[i];
    var x = rw.toString().length;
    if (x >= 8) {
        var r = rw.toString().slice(0, -5);
        list.push(r);
    } else {
        list.push(rw);
    }
        }
    return list;
    }
    function addSurprise(roundedSurprise) {
    var total = 0;
    for (var i = 0; i < roundedSurprise.length; i++) {
    total += parseFloat(roundedSurprise[i]);
    }
    var final = total / roundedSurprise.length;
    return final;
    }
    function Checker(finalDisgust, finalAnger, finalHappiness, finalFear, finalNeutral, finalSadness, finalSurprise) {
        var x = [finalDisgust, finalAnger, finalHappiness, finalFear, finalNeutral, finalSadness, finalSurprise];
        var y = [];     
        for (var i = 0; i < 7; i++) {
            if (x[i] < 0.5) {
                z = x[i] * 100000;
            }
            else if (x[i] >= 1) {
                z = x[i];
            }
            else {
                z = x[i];
            }
            y.push(z);       
        }
        drawChart(y);
    }
    google.charts.load('current', { 'packages': ['corechart'] });
    google.charts.setOnLoadCallback();
    function drawChart(y) {
    var disgust = y[0];
    var anger = y[1];
    var happiness = y[2];
    var fear = y[3];
    var neutral = y[4];
    var sadness = y[5];
    var surprise = y[6];
    var data = google.visualization.arrayToDataTable([
    ['Emotion', 'Value'],
    ['Disgust', disgust],
    ['Anger', anger],
    ['Happiness', happiness],
    ['Fear', fear],
    ['Neutral', neutral],
    ['Sadness', sadness],
    ['Surprise', surprise]
    ]);

    var options = {
    title: 'Average Emotions',
    is3D: true
    };
    var chart = new google.visualization.PieChart(document.getElementById('piechart'));
    chart.draw(data, options);
    }
    </script>
</head> 
<body>
<h2>Analize</h2>
<table>
    <tr>
        <td>
            <img src="data:image/png;base64,@Model.Image" height ="400" id="filename" data-container="body" data-toggle="popover" data-content="hello world"/>
            <button id="btn">Analize</button>
        </td>
    </tr>
</table>
    <p id="response"></p>
<script type="text/javascript">
    var file = document.getElementById('filename');
    var imageJSON = {
        "image": {
            "imgLocation": file.src
        }
    }
    var apiKey = "74106f204fd0492e9b7d93aba5b3e022";
    var apiUrl = "https://westus.api.cognitive.microsoft.com/emotion/v1.0/recognize?";

    $('#btn').click(function() {
        var file = document.getElementById('filename');
        CallAPI(imageJSON.image.imgLocation, apiUrl, apiKey);
    });
    makeblob = function(file) {
        var BASE64_MARKER = ';base64,';
        if (file.indexOf(BASE64_MARKER) == -1) {
            var parts = file.split(',');
            var contentType = parts[0].split(':')[1];
            var raw = decodeURIComponent(parts[1]);
            return new Blob([raw], { type: contentType });
        }
        var parts = file.split(BASE64_MARKER);
        var contentType = parts[0].split(':')[1];
        var raw = window.atob(parts[1]);
        var rawLength = raw.length;

        var uInt8Array = new Uint8Array(rawLength);

        for (var i = 0; i < rawLength; ++i) {
            uInt8Array[i] = raw.charCodeAt(i);
        }

        return new Blob([uInt8Array], { type: contentType });
    }

    function CallAPI(file, apiUrl, apiKey) {
        $.ajax({
                url: apiUrl,
                beforeSend: function(xhrObj) {
                    xhrObj.setRequestHeader("Content-Type", "application/octet-stream");
                    xhrObj.setRequestHeader("Ocp-Apim-Subscription-Key", apiKey);
                },
                type: "POST",
                processData: false,
                dataType: "json",
                data: makeblob(file)

            })
            .done(function(response) {
                console.log("success");
                processResult(response);
            })
            .fail(function() {
                console.log("error");
            });
        
    }
</script>
    <div id="piechart" style="width: 900px; height: 500px;"></div>  
    
</body>
