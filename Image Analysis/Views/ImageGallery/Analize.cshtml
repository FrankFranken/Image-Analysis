@using System.Drawing
@using System.Drawing.Imaging
@using System.Text
@using Microsoft.AspNet.Identity
@using System.Net;
@using Image_Analysis.Models;
@model Image_Analysis.ViewModels.AnalizeViewModel

@{
    ViewBag.Title = "Analize";
}
<style>
  h2 {
      margin-left: 0px;
  }
</style>
<head>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
<script>
    //Emotions
    function processResult(response) {
        var dataI = JSON.stringify(response);
        var dataII = JSON.parse(dataI);

        var disgust = pullDisgust(dataII);
        var roundedDisgust = roundDisgust(disgust);
        var finalDisgust = addDigust(roundedDisgust);

        var anger = pullAnger(dataII);
        var roundedAnger = roundAnger(anger);
        var finalAnger = addAnger(roundedAnger);

        var happiness = pullHappiness(dataII);
        var roundedHappiness = roundHappiness(happiness);
        var finalHappiness = addHappiness(roundedHappiness);

        var fear = pullFear(dataII);
        var roundedFear = roundFear(fear);
        var finalFear = addFear(roundedFear);

        var neutral = pullNeutral(dataII);
        var roundedNeutral = roundNeutral(neutral);
        var finalNeutral = addNeutral(roundedNeutral);

        var sadness = pullSadness(dataII);
        var roundedSadness = roundSadness(sadness);
        var finalSadness = addSadness(roundedSadness);

        var surprise = pullSurprise(dataII);
        var roundedSurprise = roundSurprise(surprise);
        var finalSurprise = addSurprise(roundedSurprise);

        Checker(finalDisgust, finalAnger, finalHappiness, finalFear, finalNeutral, finalSadness, finalSurprise);
    }

    //Disgust
    function pullDisgust(dataII) {
        var list = [];
        for (var i = 0; i < dataII.length; i++) {
            var disgust = dataII[i].scores.disgust;
            list.push(disgust);
        }
        return list;
    }

    function roundDisgust(disgust) {
        var list = [];
        for (var i = 0; i < disgust.length; i++) {
            var rw = disgust[i];
            var x = rw.toString().length;
            if (x >= 8) {
                var r = rw.toString().slice(0, -5);
                list.push(r);
            } else {
                list.push(rw);
            }
        }
        return list;
    }

    function addDigust(roundedDisgust) {
        var total = 0;
        for (var i = 0; i < roundedDisgust.length; i++) {
            total += parseFloat(roundedDisgust[i]);
        }
        var final = total / roundedDisgust.length;
        return final;
    }

    //Anger
    function pullAnger(dataII) {
        var list = [];
        for (var i = 0; i < dataII.length; i++) {
            var anger = dataII[i].scores.anger;
            list.push(anger);
        }
        return list;
    }

    function roundAnger(anger) {
        var list = [];
        for (var i = 0; i < anger.length; i++) {
            var rw = anger[i];
            var x = rw.toString().length;
            if (x >= 8) {
                var r = rw.toString().slice(0, -5);
                list.push(r);
            } else {
                list.push(rw);
            }
        }
        return list;
    }

    function addAnger(roundedAnger) {
        var total = 0;
        for (var i = 0; i < roundedAnger.length; i++) {
            total += parseFloat(roundedAnger[i]);
        }
        var final = total / roundedAnger.length;
        return final;
    }

    //Happiness
    function pullHappiness(dataII) {
        var list = [];
        for (var i = 0; i < dataII.length; i++) {
            var happiness = dataII[i].scores.happiness;
            list.push(happiness);
        }
        return list;
    }

    function roundHappiness(happiness) {
        var list = [];
        for (var i = 0; i < happiness.length; i++) {
            var rw = happiness[i];
            var x = rw.toString().length;
            if (x >= 8) {
                var r = rw.toString().slice(0, -5);
                list.push(r);
            } else {
                list.push(rw);
            }
        }
        return list;
    }

    function addHappiness(roundedHappiness) {
        var total = 0;
        for (var i = 0; i < roundedHappiness.length; i++) {
            total += parseFloat(roundedHappiness[i]);
        }
        var final = total / roundedHappiness.length;
        return final;
    }

    //Fear
    function pullFear(dataII) {
        var list = [];
        for (var i = 0; i < dataII.length; i++) {
            var fear = dataII[i].scores.fear;
            list.push(fear);
        }
        return list;
    }

    function roundFear(fear) {
        var list = [];
        for (var i = 0; i < fear.length; i++) {
            var rw = fear[i];
            var x = rw.toString().length;
            if (x >= 8) {
                var r = rw.toString().slice(0, -5);
                list.push(r);
            } else {
                list.push(rw);
            }
        }
        return list;
    }

    function addFear(roundedFear) {
        var total = 0;
        for (var i = 0; i < roundedFear.length; i++) {
            total += parseFloat(roundedFear[i]);
        }
        var final = total / roundedFear.length;
        return final;
    }

    //Neutral
    function pullNeutral(dataII) {
        var list = [];
        for (var i = 0; i < dataII.length; i++) {
            var neutral = dataII[i].scores.neutral;
            list.push(neutral);
        }
        return list;
    }

    function roundNeutral(neutral) {
        var list = [];
        for (var i = 0; i < neutral.length; i++) {
            var rw = neutral[i];
            var x = rw.toString().length;
            if (x >= 8) {
                var r = rw.toString().slice(0, -5);
                list.push(r);
            } else {
                list.push(rw);
            }
        }
        return list;
    }

    function addNeutral(roundedNeutral) {
        var total = 0;
        for (var i = 0; i < roundedNeutral.length; i++) {
            total += parseFloat(roundedNeutral[i]);
        }
        var final = total / roundedNeutral.length;
        return final;
    }

    //Sadness
    function pullSadness(dataII) {
        var list = [];
        for (var i = 0; i < dataII.length; i++) {
            var sadness = dataII[i].scores.sadness;
            list.push(sadness);
        }
        return list;
    }

    function roundSadness(sadness) {
        var list = [];
        for (var i = 0; i < sadness.length; i++) {
            var rw = sadness[i];
            var x = rw.toString().length;
            if (x >= 8) {
                var r = rw.toString().slice(0, -5);
                list.push(r);
            } else {
                list.push(rw);
            }
        }
        return list;
    }

    function addSadness(roundedSadness) {
        var total = 0;
        for (var i = 0; i < roundedSadness.length; i++) {
            total += parseFloat(roundedSadness[i]);
        }
        var final = total / roundedSadness.length;
        return final;
    }

    //Surprise
    function pullSurprise(dataII) {
        var list = [];
        for (var i = 0; i < dataII.length; i++) {
            var surprise = dataII[i].scores.surprise;
            list.push(surprise);
        }
        return list;
    }

    function roundSurprise(surprise) {
        var list = [];
        for (var i = 0; i < surprise.length; i++) {
            var rw = surprise[i];
            var x = rw.toString().length;
            if (x >= 8) {
                var r = rw.toString().slice(0, -5);
                list.push(r);
            } else {
                list.push(rw);
            }
        }
        return list;
    }

    function addSurprise(roundedSurprise) {
        var total = 0;
        for (var i = 0; i < roundedSurprise.length; i++) {
            total += parseFloat(roundedSurprise[i]);
        }
        var final = total / roundedSurprise.length;
        return final;
    }

    //Check lowest value will not round to 0
    function Checker(finalDisgust, finalAnger, finalHappiness, finalFear, finalNeutral, finalSadness, finalSurprise) {
        var x = [finalDisgust, finalAnger, finalHappiness, finalFear, finalNeutral, finalSadness, finalSurprise];
        var y = [];
        for (var i = 0; i < 7; i++) {
            if (x[i] < 0.5) {
                z = x[i] * 100000;
            } else if (x[i] >= 1) {
                z = x[i];
            } else {
                z = x[i];
            }
            y.push(z);
        }
        drawChart(y);
    }

    google.charts.load('current', { 'packages': ['corechart'] });
    google.charts.setOnLoadCallback();

    //Build Chart
    function drawChart(y) {
        var disgust = y[0];
        var anger = y[1];
        var happiness = y[2];
        var fear = y[3];
        var neutral = y[4];
        var sadness = y[5];
        var surprise = y[6];
        var data = google.visualization.arrayToDataTable([
            ['Emotion', 'Value'],
            ['Disgust', disgust],
            ['Anger', anger],
            ['Happiness', happiness],
            ['Fear', fear],
            ['Neutral', neutral],
            ['Sadness', sadness],
            ['Surprise', surprise]
        ]);

        var options = {
            title: 'Average Emotions',
            is3D: true
        };
        var chart = new google.visualization.PieChart(document.getElementById('piechart'));
        chart.draw(data, options);
        var results = tips(disgust, anger, happiness, fear, neutral, sadness, surprise);
        document.getElementById("id1").innerHTML = results;
    }

    function tips(disgust, anger, happiness, fear, neutral, sadness, surprise) {
        if (disgust > anger &&
            disgust > happiness &&
            disgust > fear &&
            disgust > neutral &&
            disgust > sadness &&
            disgust > surprise) {
            var result = "Your primary emotion is Disgust, “The fastest way to kill morale is to treat an employee like a resource similar to a stamp press or die cutter,” said Curtis Stuehrenberg of Accelrys. Instead, small gestures like learning your employees’ names, and sending flowers when they are sick can go a long way.";
            return result;
        } else if
            (anger > disgust &&
                anger > happiness &&
                anger > fear &&
                anger > neutral &&
                anger > sadness &&
                anger > surprise){
            var result = "Your primary emotion is Anger. “No one wants to leave a place where they are having fun,” said recruiter Abby Kohut at Staffing Symphony LLC. “For little to no cost employers can implement programs that make their employees smile.” Her suggestions include potluck cooking contests, baby picture contests, and department shows.";
            return result;
        } else if
        (happiness > disgust &&
            happiness > anger &&
            happiness > fear &&
            happiness > neutral &&
            happiness > sadness &&
            happiness > surprise) {
            var result = "Your primary emotion is Happiness! Good job on promoting great company culture.";
            return result;
        } else if
        (fear > disgust &&
            fear > anger &&
            fear > happiness &&
            fear > neutral &&
            fear > sadness &&
            fear > surprise) {
            var result = "Your primary emotion is Fear. One of the top reasons employees leave a company is lack of development opportunities, so providing your employees with professional effective training is sure to boost morale,” said Robert Bilotti of Novita.";
            return result;
        } else if
        (neutral > disgust &&
            neutral > anger &&
            neutral > happiness &&
            neutral > fear &&
            neutral > sadness &&
            neutral > surprise) {
            var result = "Your primary emotion is Neutral. All of your employees can point out inefficiencies in your organization, but not all feel empowered to do so. Paul Vragel of 4aBetterBusiness, Inc. recommends listening to employees to learn about what gets “in the way of the good job they want to do” and then involving them in the process to eliminate these barriers. Using this approach, he helped a mid-market manufacturing company implement almost 100 ideas that increased earnings by 30% within a few months.";
            return result;
         } else if
         (sadness > disgust &&
            sadness > anger &&
            sadness > happiness &&
            sadness > fear &&
            sadness > neutral &&
            sadness > surprise) {
             var result = "Your primary emotion is Sadness. Tell people when they are doing a fabulous job. It is so simple, and works so well. This piece of advice was by far the most common response I heard when asking professionals how to boost employee morale. Praise your employees at staff meetings, or take the time to thank them in a hand-written note. Whatever the message, the most important thing is that employees know that their hard work is noticed and appreciated.";
             return result;
         } else if
        (surprise > disgust &&
            surprise > anger &&
            surprise > happiness &&
            surprise > fear &&
            surprise > neutral &&
            surprise > sadness) {
             var result = "Your primary emotion is Surprise. Nobody likes to be the last to know, but when employees don’t know what is going on in their own company, productive time can give way to duplicate or unnecessary efforts on the part of the staff. Worse yet, when employees are only given part of the story, not the whole picture, they are left to fill in the blanks with gossip, rumors, and worry.";
             return result;
        }       
    }
</script>
</head> 
<body>
<h2>Analize</h2>
    <center>
        <div>
            <img src="data:image/png;base64,@Model.Image" height="400" id="filename" data-container="body" data-toggle="popover" data-content="hello world" />
            <button id="btn">Analize</button>
        </div>
    </center>     
<p id="response"></p>
<script type="text/javascript">
    var file = document.getElementById('filename');
    var imageJSON = {
        "image": {
            "imgLocation": file.src
        }
    }
    var apiKey = "74106f204fd0492e9b7d93aba5b3e022";
    var apiUrl = "https://westus.api.cognitive.microsoft.com/emotion/v1.0/recognize?";

    $('#btn').click(function() {
        var file = document.getElementById('filename');
        CallAPI(imageJSON.image.imgLocation, apiUrl, apiKey);
    });
    // Convert image from base 64 to blob
    makeblob = function(file) {
        var BASE64_MARKER = ';base64,';
        if (file.indexOf(BASE64_MARKER) == -1) {
            var parts = file.split(',');
            var contentType = parts[0].split(':')[1];
            var raw = decodeURIComponent(parts[1]);
            return new Blob([raw], { type: contentType });
        }
        var parts = file.split(BASE64_MARKER);
        var contentType = parts[0].split(':')[1];
        var raw = window.atob(parts[1]);
        var rawLength = raw.length;

        var uInt8Array = new Uint8Array(rawLength);

        for (var i = 0; i < rawLength; ++i) {
            uInt8Array[i] = raw.charCodeAt(i);
        }

        return new Blob([uInt8Array], { type: contentType });
    }
    //Call Emotions API
    function CallAPI(file, apiUrl, apiKey) {
        $.ajax({
                url: apiUrl,
                beforeSend: function(xhrObj) {
                    xhrObj.setRequestHeader("Content-Type", "application/octet-stream");
                    xhrObj.setRequestHeader("Ocp-Apim-Subscription-Key", apiKey);
                },
                type: "POST",
                processData: false,
                dataType: "json",
                data: makeblob(file)

            })
            .done(function(response) {
                console.log("success");
                processResult(response);
            })
            .fail(function() {
                console.log("error");
            });
        
    }
</script>   
<center>
    <div id="piechart" style="width: 1000px; height: 600px;"></div>
</center>
        <div>
            <h2 id="id1"></h2>
        </div>
</body>
